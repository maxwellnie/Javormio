package io.github.maxwellnie.javormio.framework.java.reflect;

import io.github.maxwellnie.javormio.framework.cache.Cache;

/**
 * @author Maxwell Nie
 */
public class CacheSupport {
    private final ObjectFactory<Object> objectFactory;
    private final Class<? extends Cache> clazz;
    private final Cache<Object, Cache> cacheManager;

    public CacheSupport(ObjectFactory<Object> objectFactory, Class<? extends Cache> clazz, Cache<Object, Cache> cacheManager) {
        this.objectFactory = objectFactory;
        this.clazz = clazz;
        this.cacheManager = cacheManager;
    }

    public synchronized <K, V> Cache<K, V> produceCache(Object session) throws ReflectiveOperationException {
        if (cacheManager.exists(session))
            return cacheManager.get(session);
        Cache cache = objectFactory.produce(clazz);
        cacheManager.put(session, cache);
        return cache;
    }

    public ObjectFactory<Object> getObjectFactory() {
        return objectFactory;
    }

    public Class<? extends Cache> getClazz() {
        return clazz;
    }

    public Cache<Object, Cache> getCacheManager() {
        return cacheManager;
    }
}
