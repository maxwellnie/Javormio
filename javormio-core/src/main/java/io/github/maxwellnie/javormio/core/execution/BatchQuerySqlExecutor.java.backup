package io.github.maxwellnie.javormio.core.sql.executor;

import io.github.maxwellnie.javormio.core.jdbc.connection.ConnectionResource;
import io.github.maxwellnie.javormio.core.result.ResultSetConvertor;
import io.github.maxwellnie.javormio.core.result.TypeMapping;
import execution.core.io.github.maxwellnie.javormio.ExecutableSql;
import translation.core.io.github.maxwellnie.javormio.SqlParameter;
import io.github.maxwellnie.javormio.java.api.Constants;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * 批量查询语句执行器
 * @author Maxwell Nie
 */
public class BatchQuerySqlExecutor extends BaseSqlExecutor{
    @Override
    public Object run(ExecutorContext executorContext) throws SQLException {
        ConnectionResource connectionResource = executorContext.getConnectionResource();
        ExecutableSql executableSql = executorContext.getExecutableSql();
        Map<String, Object> properties = executorContext.getProperties();
        //获取类型映射
        TypeMapping typeMapping = executorContext.getTypeMapping();
        //获取结果集转换器
        ResultSetConvertor resultSetConvertor = (ResultSetConvertor) properties.get(Constants.RESULT_SET_CONVERTOR);
        //获取连接对象
        Connection connection = connectionResource
                .getConnection();
        //打开报表
        try (PreparedStatement preparedStatement = connection.prepareStatement(executableSql.getSqlList()[0])) {
            //获取参数列表
            List<SqlParameter[]> sqlParametersList = executableSql.getParametersList();
            //判断参数列表是否为空，非空则设置当前行SQL参数数组
            if (!sqlParametersList.isEmpty())
                for(SqlParameter[] sqlParameters : sqlParametersList){
                    //判断参数数组是否为空，如果不空则设置参数到报表，例如:SELECT * FROM tb_user WHERE id = ?; preparedStatement.setInt(1, 1);
                    if (sqlParameters != null) {
                        int index = 1;
                        //遍历参数
                        for (SqlParameter sqlParameter : sqlParameters) {
                            //获取参数的类型处理器，使用类型处理器设置报表的参数
                            sqlParameter.getTypeHandler()
                                    .setValue(preparedStatement, index++, sqlParameter.getValue());
                        }
                        //添加报表到批处理
                        preparedStatement.addBatch();
                    }
                }
            //执行批处理，返回影响行数
            int[] updateCounts = preparedStatement.executeBatch();
            //收集产生的结果集
            LinkedList<ResultSet> list = new LinkedList<>();
            for (int flag: updateCounts){
                if (flag == -2){
                    list.add(preparedStatement.getResultSet());
                }
            }
            //转换结果集到Java对象
            return resultSetConvertor.convert(list, typeMapping);
        }
    }
}
